def getTestProperties() {
    def activeProviderName = project.hasProperty("activeProviderName") ? project.activeProviderName : null
    def destroyClusterOnShutdown = project.hasProperty("destroyClusterOnShutdown") ? Boolean.valueOf(project.destroyClusterOnShutdown as String) : false
    def namespace = project.hasProperty("namespace") ? project.namespace : null
    def doCleanup = project.hasProperty("doCleanup") ? Boolean.valueOf(project.doCleanup as String) : true
    def xlDeployStartDockerRepository = project.hasProperty("xlDeployStartDockerRepository") ? project.xlDeployStartDockerRepository : "xebialabsunsupported"
    def xlDeployWorkerStartDockerRepository = project.hasProperty("xlDeployWorkerStartDockerRepository") ? project.xlDeployWorkerStartDockerRepository : xlDeployStartDockerRepository
    def xlDeployUpgradeDockerRepository = project.hasProperty("xlDeployUpgradeDockerRepository") ? project.xlDeployUpgradeDockerRepository : "xebialabsunsupported"
    def xlDeployStartVersion = project.hasProperty("xlDeployStartVersion") ? project.xlDeployStartVersion : xlDeployVersion
    def xlDeployUpgradeVersion = project.hasProperty("xlDeployUpgradeVersion") ? project.xlDeployUpgradeVersion : xlDeployVersion
    def operatorImage = project.hasProperty("operatorImage") ? project.operatorImage : null
    def operatorPackageVersion = project.hasProperty("operatorPackageVersion") ? project.operatorPackageVersion : null
    def operatorStartBranch = project.hasProperty("operatorStartBranch") ? project.operatorStartBranch : null
    def operatorUpgradeUseZip = project.hasProperty("operatorUpgradeUseZip") ? Boolean.valueOf(project.operatorUpgradeUseZip as String) : true
    def operatorUpgradeBranch = project.hasProperty("operatorUpgradeBranch") ? project.operatorUpgradeBranch : null
    def opBlueprintBranch = project.hasProperty("opBlueprintBranch") ? project.opBlueprintBranch as String : null
    def xlCliVersion = project.hasProperty("xlCliVersion") ? project.xlCliVersion as String : null
    def xlCliPath = project.hasProperty("xlCliPath") ? project.xlCliPath as String : null
    def cliNightly = project.hasProperty("cliNightly") ? Boolean.valueOf(project.cliNightly as String) : true
    def deployUpgraderVersion = project.hasProperty("deployUpgraderVersion") ? project.deployUpgraderVersion as String : null
    def keycloakUrl = project.hasProperty("keycloakUrl") ? project.keycloakUrl as String : null
    def ingressType = project.hasProperty("ingressType") ? project.ingressType as String : null
    def deploySuffix = project.hasProperty("deploySuffix") ? project.deploySuffix as String : null

    [
        activeProviderName                 : activeProviderName,
        namespace                           : namespace,
        doCleanup                           : doCleanup,
        destroyClusterOnShutdown           : destroyClusterOnShutdown,
        opBlueprintBranch                  : opBlueprintBranch,
        operatorImage                      : operatorImage,
        operatorPackageVersion             : operatorPackageVersion,
        operatorStartBranch                : operatorStartBranch,
        operatorUpgradeUseZip              : operatorUpgradeUseZip,
        operatorUpgradeBranch              : operatorUpgradeBranch,
        xlDeployStartDockerRepository      : xlDeployStartDockerRepository,
        xlDeployWorkerStartDockerRepository: xlDeployWorkerStartDockerRepository,
        xlDeployStartVersion               : xlDeployStartVersion,
        xlDeployUpgradeDockerRepository    : xlDeployUpgradeDockerRepository,
        xlDeployUpgradeVersion             : xlDeployUpgradeVersion,
        xlCliVersion                       : xlCliVersion,
        xlCliPath                          : xlCliPath,
        cliNightly                         : cliNightly,
        deployUpgraderVersion               : deployUpgraderVersion,
        keycloakUrl                        : keycloakUrl,
        ingressType                        : ingressType,
        deploySuffix                        : deploySuffix,
    ]
}

def setupTestProperties(obj, Map<String, Serializable> testProperties) {
    obj.destroyClusterOnShutdown = testProperties.destroyClusterOnShutdown
    if (testProperties.operatorImage) {
        obj.operatorImage = testProperties.operatorImage
    }
    if (testProperties.operatorPackageVersion) {
        obj.operatorPackageVersion = testProperties.operatorPackageVersion
    }
    if (testProperties.operatorStartBranch) {
        obj.operatorBranch = testProperties.operatorStartBranch
    }
}

def testProperties = getTestProperties()

Map<String, Object> serverOverlays = [
    conf: [
        fileTree(dir: "$rootDir/integration-tests/config/conf", includes: ["*.*"])
    ]
]

deployIntegrationServer {
    cli {
        filesToExecute = [file("$rootDir/integration-tests/config/cluster-itest/provision.py")]
        overlays = [
            ext: [
                fileTree(dir: "$rootDir/integration-tests/config/cli", includes: ["**/*.py"])
            ],
            lib: [
                "com.xebialabs.xl-platform.test-utils:py-modules:${testUtilsVersion}@jar"
            ]
        ]
    }
    cluster {
        enable = true
        profile = 'operator'
        publicPort = 10001
    }
    if (testProperties.activeProviderName) {
        clusterProfiles {
            operator {
                activeProviderName = testProperties.activeProviderName
                doCleanup = testProperties.doCleanup
                deploySuffix = testProperties.deploySuffix
                if (testProperties.xlCliVersion) {
                    xlCliVersion = testProperties.xlCliVersion
                }
                if (testProperties.xlCliVersion) {
                    xlCliVersion = testProperties.xlCliVersion
                }
                if (testProperties.cliNightly) {
                    cliNightly = testProperties.cliNightly
                }
                if (testProperties.xlCliPath) {
                    xlCliPath = testProperties.xlCliPath
                }
                if (testProperties.namespace) {
                    namespace = testProperties.namespace
                }
                if (testProperties.ingressType) {
                    ingressType = testProperties.ingressType
                }
                awsEks {
                    name = 'aws-eks-test-cluster'
                    region = 'us-east-1'
                    setupTestProperties(it, testProperties)
                }
                awsOpenshift {
                    apiServerURL = 'https://api.apollo-operator.raqx.p1.openshiftapps.com:6443'
                    host = 'router-default.apps.apollo-operator.raqx.p1.openshiftapps.com'
                    name = 'aws-openshift-test-cluster'
                    oauthHostName = "oauth-openshift.apps.apollo-operator.raqx.p1.openshiftapps.com"
                    setupTestProperties(it, testProperties)
                }
                azureAks {
                    name = 'azure-aks-test-cluster'
                    clusterNodeCount = 3
                    location = 'northcentralus'
                    setupTestProperties(it, testProperties)
                }
                gcpGke {
                    name = 'gcp-gke-test-cluster'
                    storageClass = 'standard-rwx'
                    accountName = 'gcp-gke-test-cluster@apollo-playground.iam.gserviceaccount.com'
                    projectName = 'apollo-playground'
                    regionZone = 'us-central1-a'
                    clusterNodeCount = 3
                    clusterNodeVmSize = 'e2-standard-2'
                    setupTestProperties(it, testProperties)
                }
                onPremise {
                    name = 'onprem-test-cluster'
                    clusterNodeCpus = 4
                    clusterNodeMemory = 15000
                    setupTestProperties(it, testProperties)
                }
            }
        }
    }
    operatorServer {
        dockerImage = "xebialabsunsupported/xl-deploy"
        version = xlDeployTrialVersion
    }
    servers {
        server01 {
            dockerImage = "${testProperties.xlDeployStartDockerRepository}/xl-deploy"
            centralConfigDockerImage = "${testProperties.xlDeployStartDockerRepository}/central-configuration"
            pingRetrySleepTime = 10
            pingTotalTries = 120
            version = testProperties.xlDeployStartVersion
            overlays = serverOverlays
        }
        server02 {
        }
    }
    workers {
        worker01 {
            dockerImage = "${testProperties.xlDeployWorkerStartDockerRepository}/deploy-task-engine"
        }
        worker02 {
        }
    }
}

['ClusterTestGroup'].each { String groupName ->
    def processors = (Runtime.runtime.availableProcessors()).intValue()
    def numberOfThreads = project.hasProperty("itestNumberOfThreads") ?
        Integer.valueOf(project.itestNumberOfThreads) : Math.max(processors.intdiv(2), 3)

    tasks.create name: "parallelTests$groupName", type: Test, {
        useTestNG()
        testClassesDirs = sourceSets.test.output.classesDirs + sourceSets.main.output.classesDirs
        maxParallelForks = numberOfThreads
        forkEvery = 1
        includes = ["**/$groupName*"]
        environment = [
            EXPECTED_DEPLOYIT_VERSION : testProperties.xlDeployStartVersion,
            EXPECTED_NUMBER_OF_WORKERS: 2
        ]
        outputs.upToDateWhen {
            false
        }
    }
    if (testProperties.xlDeployUpgradeVersion) {
        tasks.create name: "parallelTestsAfterUpgrade$groupName", type: Test, {
            useTestNG()
            testClassesDirs = sourceSets.test.output.classesDirs + sourceSets.main.output.classesDirs
            maxParallelForks = numberOfThreads
            forkEvery = 1
            includes = ["**/$groupName*"]
            environment = [
                EXPECTED_DEPLOYIT_VERSION : testProperties.xlDeployUpgradeVersion,
                EXPECTED_NUMBER_OF_WORKERS: 2
            ]
            outputs.upToDateWhen {
                false
            }
        }
    }
}

afterEvaluate {
    if (testProperties.xlDeployUpgradeVersion) {
        operatorBasedUpgradeDeployCluster {
            imageRepositoryName = testProperties.xlDeployUpgradeDockerRepository
            imageTargetVersion = testProperties.xlDeployUpgradeVersion
            useOperatorZip = testProperties.operatorUpgradeUseZip
            if (testProperties.deployUpgraderVersion) {
                deployUpgraderVersion = testProperties.deployUpgraderVersion
            }
            if (testProperties.operatorUpgradeBranch) {
                operatorBranch = testProperties.operatorUpgradeBranch
            }
            if (testProperties.opBlueprintBranch) {
                opBlueprintBranch = testProperties.opBlueprintBranch
            }
            if (testProperties.keycloakUrl) {
                keycloakUrl = testProperties.keycloakUrl
            }
        }
    }

    def parallelTests = []
    def parallelTestsAfterUpgrade = []
    ['ClusterTestGroup'].each { String groupName ->
        parallelTests.add(tasks["parallelTests$groupName"])
        if (testProperties.xlDeployUpgradeVersion) {
            parallelTestsAfterUpgrade.add(tasks["parallelTestsAfterUpgrade$groupName"])
        }
    }

    [parallelTests].flatten().each {
        if (!project.hasProperty("keepServerRunning")) {
            it.dependsOn startDeployCluster
            if (testProperties.xlDeployUpgradeVersion != null) {
                it.finalizedBy stopDeployCluster
            }
        }
    }

    if (testProperties.xlDeployUpgradeVersion) {
        [parallelTestsAfterUpgrade].flatten().each {
            it.dependsOn operatorBasedUpgradeDeployCluster
            if (!project.hasProperty("keepServerRunning")) {
                it.finalizedBy stopDeployCluster
            }
        }
    }
}
