apiVersion: xldocp.digital.ai/v1alpha1
kind: DigitalaiDeployOcp
metadata:
  name: dai-ocp-xld
spec:
  AdminPassword: admin
  HealthPeriodScans: 10
  HealthProbeFailureThreshold: 12
  HealthProbes: true
  HealthProbesLivenessTimeout: 60
  HealthProbesReadinessTimeout: 60
  ImagePullPolicy: Always
  ImageRepository: xebialabs/xl-deploy
  ImageTag: "10.3.5"
  # Secrets must be manually created in the namespace
  # ImagePullSecret: xlDeploy
  KeystorePassphrase: <Provide store pass for the keystore>
  Persistence:
    AccessMode: ReadWriteOnce
    Annotations: { }
    Enabled: true
    # Choose storage class provided by your cloud provider, example "ssd" on GKE, AWS and OpenStack
    StorageClass: < provide the storageClass for DAI-DEPLOY>
    XldMasterPvcSize: 10Gi
    XldWorkerPvcSize: 10Gi
  # https://docs.xebialabs.com/v.9.8/deploy/how-to/update-the-xl-deploy-digital-certificate/#get-started
  # Convert repository-keystore.jceks files content to base64
  # ( cat repository-keystore.jceks | base64 -w 0 ) and put the output here
  RepositoryKeystore: <Provide repositoryKeystore in base64 encoded form>
  UseExistingDB:
    Enabled: false
    # If you want to use an existing database, set 'postgresql.install' to 'false' and 'UseExistingDB.Enabled' to 'true'.
    # Uncomment the following lines and provide the values.
    # XL_DB_PASSWORD:
    # XL_DB_URL:
    # XL_DB_USERNAME:
  UseExistingMQ:
    Enabled: false
    # If you want to use a existing Message Queue, change the "rabbitmq.install to false"
    # Set 'UseExistingMQ.Enabled' to 'true'.Uncomment the following lines and provide the values.
    # XLD_TASK_QUEUE_DRIVER_CLASS_NAME:
    # XLD_TASK_QUEUE_PASSWORD:
    # XLD_TASK_QUEUE_URL:
    # XLD_TASK_QUEUE_USERNAME:
  XldMasterCount: 3
  XldWorkerCount: 3
  affinity: { }
  nodeSelector: { }
  oidc:
    accessTokenUri: null
    clientId: null
    clientSecret: null
    enabled: false
    external: false
    issuer: null
    keyRetrievalUri: null
    logoutUri: null
    postLogoutRedirectUri: null
    redirectUri: null
    rolesClaimName: null
    userAuthorizationUri: null
    userNameClaimName: null
  postgresql:
    audit:
      clientMinMessages: error
      logConnections: false
      logDisconnections: false
      logHostname: false
      logLinePrefix: ""
      logTimezone: ""
      pgAuditLog: ""
      pgAuditLogCatalog: "off"
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: [ ]
        imageRegistry: ""
        postgresql:
          existingSecret: ""
          postgresqlDatabase: ""
          postgresqlPassword: ""
          postgresqlUsername: ""
          replicationPassword: ""
          servicePort: ""
        storageClass: ""
    commonAnnotations: { }
    configurationConfigMap: ""
    containerSecurityContext:
      enabled: false
      runAsUser: 1001
    customLivenessProbe: { }
    customReadinessProbe: { }
    customStartupProbe: { }
    diagnosticMode:
      args:
        - infinity
      command:
        - sleep
      enabled: false
    existingSecret: ""
    extendedConfConfigMap: ""
    extraDeploy: [ ]
    extraEnv: [ ]
    extraEnvVarsCM: ""
    fullnameOverride: ""
    global:
      imagePullSecrets: [ ]
      imageRegistry: ""
      postgresql:
        existingSecret: ""
        postgresqlDatabase: ""
        postgresqlPassword: ""
        postgresqlUsername: ""
        replicationPassword: ""
        servicePort: ""
      storageClass: ""
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: [ ]
      registry: docker.io
      repository: bitnami/postgresql
      tag: 11.13.0-debian-10-r73
    initdbPassword: ""
    initdbScripts: { }
    initdbScriptsConfigMap: ""
    initdbScriptsSecret: postgresql-init-sql-xld
    initdbUser: ""
    install: true
    ldap:
      baseDN: ""
      bind_password: ""
      bindDN: ""
      enabled: false
      port: ""
      prefix: ""
      scheme: ""
      search_attr: ""
      search_filter: ""
      server: ""
      suffix: ""
      tls: ""
      url: ""
    lifecycleHooks: { }
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    metrics:
      customMetrics: { }
      enabled: false
      extraEnvVars: [ ]
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io
        repository: bitnami/postgres-exporter
        tag: 0.10.0-debian-10-r101
      livenessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      prometheusRule:
        additionalLabels: { }
        enabled: false
        namespace: ""
        rules: [ ]
      readinessProbe:
        enabled: true
        failureThreshold: 6
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: { }
      securityContext:
        enabled: false
        runAsUser: 1001
      service:
        annotations:
          prometheus.io/port: "9187"
          prometheus.io/scrape: "true"
        loadBalancerIP: ""
        type: ClusterIP
      serviceMonitor:
        additionalLabels: { }
        enabled: false
        interval: ""
        metricRelabelings: [ ]
        namespace: ""
        relabelings: [ ]
        scrapeTimeout: ""
    nameOverride: ""
    networkPolicy:
      allowExternal: true
      enabled: false
      explicitNamespacesSelector: { }
    persistence:
      accessModes:
        - ReadWriteOnce
      annotations: { }
      enabled: true
      existingClaim: ""
      mountPath: /bitnami/postgresql
      selector: { }
      size: 8Gi
      # Choose storage class provided by your cloud provider, example "ssd" on GKE, AWS and OpenStack
      storageClass: <Provode Storage Class to be defined for PostgreSQL>
      subPath: ""
    pgHbaConfiguration: ""
    postgresqlConfiguration: { }
    postgresqlDataDir: /bitnami/postgresql/data
    postgresqlDatabase: ""
    postgresqlDbUserConnectionLimit: ""
    postgresqlExtendedConf: { }
    postgresqlInitdbArgs: ""
    postgresqlInitdbWalDir: ""
    postgresqlMaxConnections: ""
    postgresqlPassword: postgres
    postgresqlPghbaRemoveFilters: ""
    postgresqlPostgresConnectionLimit: ""
    postgresqlPostgresPassword: ""
    postgresqlSharedPreloadLibraries: pgaudit
    postgresqlStatementTimeout: ""
    postgresqlTcpKeepalivesCount: ""
    postgresqlTcpKeepalivesIdle: ""
    postgresqlTcpKeepalivesInterval: ""
    postgresqlUsername: postgres
    primary:
      affinity: { }
      annotations: { }
      extraInitContainers: [ ]
      extraPodSpec: { }
      extraVolumeMounts: [ ]
      extraVolumes: [ ]
      labels: { }
      nodeAffinityPreset:
        key: ""
        type: ""
        values: [ ]
      nodeSelector: { }
      podAffinityPreset: ""
      podAnnotations: { }
      podAntiAffinityPreset: soft
      podLabels: { }
      priorityClassName: ""
      service:
        clusterIP: ""
        nodePort: ""
        type: ""
      sidecars: [ ]
      tolerations: [ ]
    primaryAsStandBy:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    psp:
      create: false
    rbac:
      create: false
    readReplicas:
      affinity: { }
      annotations: { }
      extraInitContainers: [ ]
      extraPodSpec: { }
      extraVolumeMounts: [ ]
      extraVolumes: [ ]
      labels: { }
      nodeAffinityPreset:
        key: ""
        type: ""
        values: [ ]
      nodeSelector: { }
      persistence:
        enabled: true
      podAffinityPreset: ""
      podAnnotations: { }
      podAntiAffinityPreset: soft
      podLabels: { }
      priorityClassName: ""
      resources: { }
      service:
        clusterIP: ""
        nodePort: ""
        type: ""
      sidecars: [ ]
      tolerations: [ ]
      topologySpreadConstraints: [ ]
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replication:
      applicationName: my_application
      enabled: false
      numSynchronousReplicas: 0
      password: repl_password
      readReplicas: 1
      singleService: true
      synchronousCommit: "off"
      uniqueServices: false
      user: repl_user
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    securityContext:
      enabled: false
      fsGroup: 1001
    service:
      annotations: { }
      clusterIP: ""
      externalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: [ ]
      nodePort: ""
      port: 5432
      type: ClusterIP
    serviceAccount:
      autoMount: false
      enabled: false
      name: ""
    shmVolume:
      chmod:
        enabled: false
      enabled: true
      sizeLimit: ""
    startupProbe:
      enabled: false
      failureThreshold: 10
      initialDelaySeconds: 30
      periodSeconds: 15
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: ""
    tls:
      autoGenerated: false
      certCAFilename: ""
      certFilename: ""
      certKeyFilename: ""
      certificatesSecret: ""
      crlFilename: ""
      enabled: false
      preferServerCiphers: true
    updateStrategy:
      type: RollingUpdate
    usePasswordFile: false
    volumePermissions:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r227
      securityContext:
        runAsUser: auto
  rabbitmq:
    advancedConfiguration: ""
    affinity: { }
    args: [ ]
    auth:
      erlangCookie: DEPLOYRABBITMQCLUSTER
      existingErlangSecret: ""
      existingPasswordSecret: ""
      password: guest
      tls:
        autoGenerated: false
        caCertificate: ""
        enabled: false
        existingSecret: ""
        existingSecretFullChain: false
        failIfNoPeerCert: true
        serverCertificate: ""
        serverKey: ""
        sslOptionsVerify: verify_peer
      username: guest
    clusterDomain: cluster.local
    clustering:
      addressType: hostname
      enabled: true
      forceBoot: true
      partitionHandling: autoheal
      rebalance: false
    command: [ ]
    common:
      exampleValue: common-chart
      global:
        imagePullSecrets: [ ]
        imageRegistry: ""
        storageClass: ""
    commonAnnotations: { }
    communityPlugins: ""
    configuration: |-
      {{- if not .Values.loadDefinition.enabled -}}
      ## Username and password
      ##
      default_user = {{ .Values.auth.username }}
      default_pass = CHANGEME
      {{- end }}
      {{- if .Values.clustering.enabled }}
      ## Clustering
      ##
      cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}
      cluster_formation.node_cleanup.interval = 10
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = {{ .Values.clustering.partitionHandling }}
      {{- end }}
      # queue master locator
      queue_master_locator = min-masters
      # enable guest user
      loopback_users.guest = false
      {{ tpl .Values.extraConfiguration . }}
      {{- if .Values.auth.tls.enabled }}
      ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
      listeners.ssl.default = {{ .Values.service.tlsPort }}
      ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
      ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
      ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
      ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
      {{- end }}
      {{- if .Values.ldap.enabled }}
      auth_backends.1 = rabbit_auth_backend_ldap
      auth_backends.2 = internal
      {{- range $index, $server := .Values.ldap.servers }}
      auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
      {{- end }}
      auth_ldap.port = {{ .Values.ldap.port }}
      auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
      {{- if .Values.ldap.tls.enabled }}
      auth_ldap.use_ssl = true
      {{- end }}
      {{- end }}
      {{- if .Values.metrics.enabled }}
      ## Prometheus metrics
      ##
      prometheus.tcp.port = 9419
      {{- end }}
      {{- if .Values.memoryHighWatermark.enabled }}
      ## Memory Threshold
      ##
      total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
      vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
      {{- end }}
    containerSecurityContext: { }
    customLivenessProbe: { }
    customReadinessProbe: { }
    customStartupProbe: { }
    diagnosticMode:
      args:
        - infinity
      command:
        - sleep
      enabled: false
    extraConfiguration: |
      load_definitions = /app/xld-load_definition.json
      raft.wal_max_size_bytes = 1048576
    extraContainerPorts: [ ]
    extraDeploy: [ ]
    extraEnvVars: [ ]
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPlugins: rabbitmq_jms_topic_exchange
    extraSecrets:
      xld-load-definition:
        xld-load_definition.json: |
          {
          "users": [
            {
                "name": "{{ .Values.auth.username }}",
                "password": "{{ .Values.auth.password }}",
                "tags": "administrator"
            }
            ],
          "vhosts": [
            {
              "name": "/"
            }
            ],
            "permissions": [
            {
              "user": "{{ .Values.auth.username }}",
              "vhost": "/",
              "configure": ".*",
              "write": ".*",
              "read": ".*"
            }
            ],
          "global_parameters": [
            {
              "name": "cluster_name",
              "value": ""
            }
            ],
           "policies": [
              {
                "name": "ha-all",
                "apply-to": "all",
                "pattern": ".*",
                "vhost": "/",
                "definition": {
                  "ha-mode": "all",
                  "ha-sync-mode": "automatic",
                  "ha-sync-batch-size": 1
                }
              }
            ]
          }
    extraSecretsPrependReleaseName: false
    extraVolumeMounts: [ ]
    extraVolumes: [ ]
    fullnameOverride: ""
    global:
      imagePullSecrets: [ ]
      imageRegistry: ""
      storageClass: ""
    hostAliases: [ ]
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: [ ]
      registry: docker.io
      repository: bitnami/rabbitmq
      tag: 3.9.8-debian-10-r0
    ingress:
      annotations: { }
      enabled: false
      extraHosts: [ ]
      extraTls: [ ]
      hostname: rabbitmq.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: [ ]
      selfSigned: false
      tls: false
    initContainers: [ ]
    install: true
    kubeVersion: ""
    ldap:
      enabled: false
      port: "389"
      servers: [ ]
      tls:
        enabled: false
      user_dn_pattern: cn=${username},dc=example,dc=org
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 120
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 20
    loadDefinition:
      enabled: true
      existingSecret: xld-load-definition
    logs: '-'
    maxAvailableSchedulers: ""
    memoryHighWatermark:
      enabled: false
      type: relative
      value: 0.4
    metrics:
      enabled: false
      plugins: rabbitmq_prometheus
      podAnnotations:
        prometheus.io/port: '{{ .Values.service.metricsPort }}'
        prometheus.io/scrape: "true"
      prometheusRule:
        additionalLabels: { }
        enabled: false
        namespace: ""
        rules: [ ]
      serviceMonitor:
        additionalLabels: { }
        enabled: false
        honorLabels: false
        interval: 30s
        namespace: ""
        path: ""
        podTargetLabels: { }
        relabellings: [ ]
        scrapeTimeout: ""
        targetLabels: { }
    nameOverride: ""
    networkPolicy:
      additionalRules: [ ]
      allowExternal: true
      enabled: false
    nodeAffinityPreset:
      key: ""
      type: ""
      values: [ ]
    nodeSelector: { }
    onlineSchedulers: ""
    pdb:
      create: false
      maxUnavailable: ""
      minAvailable: 1
    persistence:
      accessMode: ReadWriteOnce
      annotations: { }
      enabled: true
      existingClaim: ""
      selector: { }
      size: 8Gi
      # Choose storage class provided by your cloud provider, example "ssd" on GKE, AWS and OpenStack
      storageClass: <Storage Class to be defined for RabbitMQ>
      volumes: [ ]
    plugins: rabbitmq_management rabbitmq_peer_discovery_k8s
    podAffinityPreset: ""
    podAnnotations: { }
    podAntiAffinityPreset: soft
    podLabels: { }
    podManagementPolicy: Parallel
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
    priorityClassName: ""
    rbac:
      create: true
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 20
    replicaCount: 3
    resources:
      limits: { }
      requests: { }
    schedulerName: ""
    service:
      annotations: { }
      annotationsHeadless: { }
      distNodePort: ""
      distPort: 25672
      distPortName: dist
      epmdNodePort: ""
      epmdPortName: epmd
      externalIPs: [ ]
      externalTrafficPolicy: Cluster
      extraPorts: [ ]
      labels: { }
      loadBalancerIP: ""
      loadBalancerSourceRanges: [ ]
      managerNodePort: ""
      managerPort: 15672
      managerPortEnabled: true
      managerPortName: http-stats
      metricsNodePort: ""
      metricsPort: 9419
      metricsPortName: metrics
      nodePort: ""
      port: 5672
      portEnabled: true
      portName: amqp
      tlsNodePort: ""
      tlsPort: 5671
      tlsPortName: amqp-ssl
      type: ClusterIP
    serviceAccount:
      automountServiceAccountToken: true
      create: true
      name: ""
    sidecars: [ ]
    statefulsetLabels: { }
    terminationGracePeriodSeconds: 120
    tolerations: [ ]
    topologySpreadConstraints: [ ]
    ulimitNofiles: "65536"
    updateStrategyType: RollingUpdate
    volumePermissions:
      enabled: true
      image:
        pullPolicy: IfNotPresent
        pullSecrets: [ ]
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r226
      resources:
        limits: { }
        requests: { }
  resources: { }
  route:
    Enabled: true
    annotations:
      haproxy.router.openshift.io/cookie_name: SESSION_XLD
      haproxy.router.openshift.io/disable_cookies: "false"
      haproxy.router.openshift.io/rewrite-target: /
    hosts:
      - <Provode DNS name for accessing UI of Digital.ai Deploy>
    path: /
  satellite:
    Enabled: false
  tolerations: [ ]
  # Convert xl-deploy.lic files content to base64 ( cat xl-deploy.lic | base64 -w 0 ) and put the output here
  xldLicense: <Provide license file for Digital.ai Deploy should be converted to the base64 form>
  CentralConfigEncryptKey: <Provide the encryption key to be used for central configuration>
  centralConfiguration:
    replicas: 1
    image:
      repository: xebialabs/central-configuration
      tag: 10.4.0
      pullPolicy: "Always"
      #    pullSecret:
    persistence:
      enabled: true
      storageClass: < provide the storageClass for DAI-DEPLOY>
      annotations: { }
      pvcSize: 500M
    migrateFromEmbedded: false
